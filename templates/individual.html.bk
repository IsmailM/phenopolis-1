{% extends "layout.html" %}
{% block body %}

<h1>  Individual: {{individual.external_id}} </h1>

<!-- jQuery UI for range slider -->
<link rel="stylesheet"  type=text/css href="/static/jquery-ui.min.css">
<script  type="text/javascript" src="/static/jquery-ui.min.js"></script>
<!-- <link rel="stylesheet"  type=text/css href="/static/css/theme.blue.css"> -->
<!-- tablesorter plugin -->
<link rel=stylesheet type=text/css href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
<script  type="text/javascript" src="/static/jquery.tablesorter.js"></script>
<script  type="text/javascript" src="/static/jquery.tablesorter.widgets.js"></script>
<script type="text/javascript" src="/static/individual_pubmed.js"></script>
<!-- filter formatter code -->
<link rel="stylesheet"  type=text/css href="/static/css/filter.formatter.css">
<link rel="stylesheet"  type=text/css href="/static/css/theme.bootstrap.css">
<!--<script  type="text/javascript" src="/static/widgets/widget-filter-formatter-jui.js"></script>-->

<!-- jQuery UI for range slider -->
<!-- <link rel="stylesheet"  type=text/css href="/static/jquery-ui.min.css"> -->
<!-- <script  type="text/javascript" src="/static/jquery-ui.min.js"></script> -->
<!-- <link rel="stylesheet"  type=text/css href="/static/css/theme.blue.css"> -->
<!-- tablesorter plugin -->
<!-- <script  type="text/javascript" src="/static/jquery.tablesorter.js"></script> -->
<!-- <script  type="text/javascript" src="/static/jquery.tablesorter.widgets.js"></script> -->
<!-- filter formatter code -->
<!-- <link rel="stylesheet"  type=text/css href="/static/css/filter.formatter.css"> -->
<!-- <script  type="text/javascript" src="/static/widgets/widget-filter-formatter-jui.js"></script> -->
<style>
    #gene_table {
        margin-top: 20px;
    }
    #export-row {
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 10px;
    }
</style>

<script type="text/javascript">
{# window.variants = {{individual.variants|tojson|safe}}; #}
window.variants = [];
</script>


<div class="tabs">

<ul class="nav nav-tabs" role="tablist">
    <li class="active"><a href="#tab1" role="tab" data-toggle="tab" id="individuals_loaded">Phenotype</a></li> 
    <li><a href="#tab3" role="tab" data-toggle="tab" id="hom-loaded">Rare Hom ({{individual.homozygous_variants|length}})</a></li>
    <li><a href="#tab4" role="tab" data-toggle="tab" id="comp-hets_loaded"> Rare Comp Hets ({{individual.compound_hets|length}})</a></li>
    <li><a href="#tab5" role="tab" data-toggle="tab" id="variants_loaded">Rare Var ({{individual.rare_variants|length}})</a></li>
</ul>

<div class="tab-content">
    <div id="tab1" class="tab-pane active">
    <div class='row' id='export-row'>
        <a href='#' id='export' type='button' class='btn btn-success'>Export to CSV</a>
    </div>
    <table id="phenotype" class="tablesorter">
        <tbody>
            <tr>
                <td class="omit_csv">
                    <a href="/individual/{#{ individuals }#}" target="_blank"> {#{individuals}#} </href>
                </td>
                {% for f in individual.features %}
                        <tr>
                            <td> {{ f.label }}  </td>
                            <td> {{ hpo_gene[f.id] }}  </td>
                        </tr>
                {% endfor %}
            </tr>
        </tbody>
    </table>
    </div>


    <div id="tab5" class="tab-pane">
    <div class='row' id='export-row'>
        <a href='#' id='export' type='button' class='btn btn-success'>Export to CSV</a>
    </div>
    <div id='gene-table-div'>
    <table style="table-layout: fixed; width: 100%" id="gene_table" class="tablesorter">
        <thead>
              <tr>
                  <th>variant_id</th>
                  <th>gene_name</th>
                  <th>phenotypes</th>
              </tr>
        </thead>
        <tbody id="variants_table">
        {% for v in individual.rare_variants %}
         <tr id="{{v}}" style="word-wrap; break-work">
             <td> {{ v.variant_id }}  </td>
             <td> {{ v.gene_name }}  </td>
             <td> {{ v.hpo }}  </td>
         </tr>
         {% endfor %}
        </tbody>
    </table>
    </div>
    </div>

    <div id="tab4" class="tab-pane">
    <div class='row' id='export-row'>
        <a href='#' id='export' type='button' class='btn btn-success'>Export to CSV</a>
    </div>
        <table id="comp-hets" class="tablesorter">
            <tbody id="comp-hets_table">
            <thead>
                <tr>
                    <th>variant_id</th>
                    <th>gene_name</th>
                    <th>phenotype</th>
                </tr>
            </thead>
            {% for v in individual.compound_hets %}
                <tr>
                    <td> {{ v.variant_id }}  </td>
                    <td> {{ v.gene_name }}  </td>
                    <td> {{ v.hpo }}  </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="tab3" class="tab-pane">
        <div id='hom-variants-div'>
            <div class='row' id='export-row'>
                <a href='#' id='export' type='button' class='btn btn-success'>Export to CSV</a>
            </div>

            <table id="hom-variants" class="tablesorter">
                <tbody id="hom-variants_table_body">
                <thead>
                    <tr>
                        <th>variant_id</th>
                        <th>gene_name</th>
                        <th>phenotype</th>
                    </tr>
                </thead>
                {% for v in individual.homozygous_variants %}
                    <tr>
                        <td> {{ v.variant_id }}  </td>
                        <td> {{ v.gene_name }}  </td>
                        <td> {{ v.hpo }}  </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>


</div>

</div>



<script type=text/javascript>

var hpo_id = "" ;
var total_length=window.variants.length;
var variant_chunks = [];
var chunk_size = {{chunk_size}};
var i=0;


function finish2() {
    // call the tablesorter plugin
    $(gene_table).tablesorter({
        theme : 'bootstrap',
        headerTemplate : '{content}{icon}',
        // hidden filter input/selects will resize the columns, so try to minimize the change
        widthFixed : true,
        // initialize zebra striping and filter widgets
        widgets : ["zebra", "filter", "stickyHeaders", "uitheme"],
        widgetOptions : {
            zebra : ["even", "odd"],
            // Use the $.tablesorter.storage utility to save the most recent filters
            //filter_saveFilters : true,
            // jQuery selector string of an element used to reset the filters
            filter_reset : 'button.reset',
            filter_columnFilters : true
            // add custom selector elements to the filter row
            /*filter_formatter : {
                // (jQuery selector added v2.17.0)
                // Allele Count
                'th:contains("Allele Count")' : function($cell, indx){
                return $.tablesorter.filterFormatter.uiSlider( $cell, indx, {
                    delayed : true,
                    valueToHeader : false,
                    exactMatch : false,
                    allText : 'all', // this is ignored when compare is not empty
                    compare : [ '=', '>=', '<=' ],
                    selected : 1,
                    // jQuery UI slider options
                    value : 1,
                      min : 1,
                      max : 5000
                    });
                }
            }*/
        }
    });
}
finish2();
//$(gene_table).tablesorter();
/*
$(slider).slider({
      orientation:"vertical",
      min:1,
      step:1,
      value:1,
      slide: function( event, ui ) {
           $( "#max_count" ).val( ui.value );
           $('#gene_table > tbody > tr').filter(function() {return true;}).show();
           $('#gene_table > tbody > tr').filter(function() {
               var val=Number(ui.value);
               var allele_count=Number($(this).attr("allele_count"));
               //if (allele_count<=val) { console.log(allele_count +">"+val+" "+(allele_count > val)); }
               return allele_count > val;
           }).hide();
      } 
});
*/


// this groups the loaded variants by gene, sort the genes by count,
// and loads them in tab4
function finish() {
        var genes=_.groupBy(window.variants,"genes");
        var genes = $.map(genes, function(value,index) { return [value] });
        genes=genes.sort(function(a, b){return b.length-a.length});
        for (var j=0; j<genes.length; j++) {
            var gene=genes[j][0].vep_annotations[0].SYMBOL;
            var var_count=genes[j].length;
            var row = document.createElement("tr");
            var td = document.createElement("td");
            var a = document.createElement("a");
            a.href="/gene/"+gene+"?hpo="+hpo_id;
            a.target="_blank";
            var text = document.createTextNode(j + ":" + gene + ":" + var_count);
            a.appendChild(text);
            td.appendChild(a);
            row.appendChild(td);
            document.getElementById("variants_table2").appendChild(row);
        }
        var x=document.getElementById("genes_loaded");
        x.text="Variants Grouped By Gene "+document.getElementById("variants_table2").rows.length;
        //finish2();
}


// calls getData if more data left to fetch
// otherwise calls finish to group downloaded variants
// by gene
function handleData(data) {
    console.log(i);
     //console.log("request "+variant_chunks[i].length);
     //console.log("response "+ data.result.length);
     $.each(data.result,function(ind,r){
            // display all variants and let user filter
            if (r!=null && (typeof r.genes != "undefined")) { //&& r.vep_annotations[0].Consequence != "synonymous_variant") {
                var row = document.createElement("tr");
                var td_variant_id=document.createElement("td");
                td_variant_id.appendChild(document.createTextNode(r.variant_id));
                var td_gene=document.createElement("td");
                td_gene.appendChild(document.createTextNode(r.genes[0]));
                var td_consequence=document.createElement("td");
                td_consequence.appendChild(document.createTextNode(r.vep_annotations[0].Consequence));
                var td_allele_count=document.createElement("td");
                td_allele_count.appendChild(document.createTextNode(r.allele_count));
                row.appendChild(td_variant_id);
                row.appendChild(td_gene);
                row.appendChild(td_consequence);
                row.appendChild(td_allele_count);
                row.setAttribute('allele_count',r.allele_count);
                document.getElementById("variants_table").appendChild(row);
                var x=document.getElementById("variants_loaded");
                x.text="Variants "+document.getElementById("variants_table").rows.length+"/"+total_length;
                // append to window variants as it was emptied previously
                window.variants.push(r);
            } else {
                console.log('empty response!');
            }
     });
    if ((i+1)<variant_chunks.length) {
        getData(++i);
        //$(gene_table).trigger('update');
        // if you want to sort, say on 'Consequece'
        //var sorting = [[2,1]]
        //$(gene_table).trigger('sorton', [sorting]);
    } else {
        finish();
        $(gene_table).trigger('update');
    }
}

// calls getData if more data left to fetch
// otherwise calls finish to group downloaded variants
// by gene
function handleData2(data) {
    console.log(i);
     //console.log("request "+variant_chunks[i].length);
     //console.log("response "+ data.result.length);
     $.each(data.result,function(ind,r){
            // display all variants and let user filter
            if (r!=null && (typeof r.genes != "undefined")) { //&& r.vep_annotations[0].Consequence != "synonymous_variant") {
                //var variant_id=r.variant_id.replace(/-/g,'_');
                //var row = $('#'+variant_id);
                //$(row).append("<td>"+r.vep_annotations[0].SYMBOL+"</td>");
                var td=document.getElementById(r.variant_id+'_gene_name');
                td.innerHTML=r.vep_annotations[0].SYMBOL;
                // append to window variants as it was emptied previously
                window.variants.push(r);
            } else {
                console.log('empty response!');
            }
     });
    if ((i+1)<variant_chunks.length) {
        getData(++i);
        //$(gene_table).trigger('update');
        // if you want to sort, say on 'Consequece'
        //var sorting = [[2,1]]
        //$(gene_table).trigger('sorton', [sorting]);
    } else {
        finish();
        $(gene_table).trigger('update');
    }
}



function fetch_variant(variant_ids) {
    $.ajax( {
                type : 'POST',
                url : '/fetch_variant', 
                data : {variants: variant_ids},
                success : function(data) {
                    $.each(data.result,function(ind,r){
                        if (r==null) { return (r) }
                        var variant_id=r.variant_id.replace(/-/g,'_');
                        var row = $('#'+variant_id);
                        $(row).append("<td>"+r.vep_annotations[0].SYMBOL+"</td>");
                    })
                },
                dataType :  "json"
        } );
}


// fetches the chunk specified by i
function getData(i) {
    $.ajax( {
                type : 'POST',
                url : '/fetch_variant', 
                data : {variants: variant_chunks[i].join(',')},
                success : handleData2,
                dataType :  "json"
        } );
}

// start fetching the variants
// enter recursive calling getData - fetchVariants until i reaches
// variant_chunks.length
function fetchVariants() {
    // split variants into chunks of 100
    // window.variants gets emptied  in the process
    total_length=window.variants.length;
    variant_chunks = [];
    while (window.variants.length > 0) variant_chunks.push(window.variants.splice(0, chunk_size));
    i=0;
    getData(i);
}

// fetch private variants to patients
// calls fetchVariants on complection
function fetchPrivateVariants(patient) {
    console.log(patients);
    $.ajax( {
                type : 'POST',
                url : '/fetch_private_variants', 
                data : {patients: patient},
                success : function(data) {
                    window.variants=data.result;
                    fetchVariants();
                },
                dataType :  "json"
        } );
}

// fetch common variants to patients
// calls fetchVariants on complection
function fetchCommonVariants(patients) {
    console.log(patients);
    $.ajax( {
                type : 'POST',
                url : '/fetch_common_variants', 
                data : {patients: patients.join(',')},
                success : function(data) {
                    window.variants=data.result;
                    fetchVariants();
                },
                dataType :  "json"
        } );
}



// fetches patients with hpo term
// calls fetchPrivateVariants on completion
function fetchPatients(hpo_id) {
    $.ajax( {
                type : 'POST',
                url : '/fetch_hpo', 
                data : {hpo_ids: hpo_id},
                success : function(data) {
                    console.log(data);
                    patients=data.result;
                    $.each(data.result,function(i,r){
                        // display all variants and let user filter
                            var row = document.createElement("tr");
                            var td = document.createElement("td");
                            var a = document.createElement("a");
                            a.href="/individual/"+r;
                            a.target="_blank";
                            var text = document.createTextNode(i + ":" + r );
                            a.appendChild(text);
                            td.appendChild(a);
                            row.appendChild(td);
                            document.getElementById("individuals").appendChild(row);
                            var x=document.getElementById("individuals_loaded");
                            x.text="Individuals: "+document.getElementById("individuals").rows.length;
                            patients.push(r);
                    })
                    //fetchPrivateVariants(patients);
                    fetchCommonVariants(patients);
                },
                dataType :  "json"
        } );
}


//this start the fetching of the data
//var patients=fetchPatients(hpo_id);
//fetchPrivateVariants(patients);
fetchVariants();

// export results to excel
$('#export').on('click', function(){
    exportTableToCSV.apply(this, [$('#private-variants-table-div'), 'export.csv']);
});

</script>



{% endblock %}
